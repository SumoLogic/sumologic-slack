AWSTemplateFormatVersion: '2010-09-09'
Description: 'This solution consists of a lambda functions which is used to fetch
  logs from Slack and ingest to Sumo Logic.

  '
Metadata:
  AWS::ServerlessRepo::Application:
    Author: Sumo Logic
    Description: This solution consists of a lambda functions which is used to fetch
      logs from Slack and ingest to Sumo Logic.
    HomePageUrl: https://github.com/SumoLogic/sumologic-slack
    Labels:
    - lambda
    - sumologic
    - serverless
    - Slack
    LicenseUrl: s3://appdevstore-test/Slack/v1.0.7/5122657d5b9a0d3713e24d3a33eae431
    Name: sumologic-slack
    ReadmeUrl: s3://appdevstore-test/Slack/v1.0.7/186b7ab8d59fb47055a506b158bec2ae
    SemanticVersion: 1.0.7
    SourceCodeUrl: https://github.com/SumoLogic/sumologic-slack
    SpdxLicenseId: Apache-2.0
Outputs:
  SlackFunction:
    Description: SlackScheduler Function ARN
    Value:
      Fn::GetAtt:
      - SlackFunction
      - Arn
Parameters:
  BackfillDays:
    Type: String
    Description: Enter the number of days for which logs should be collected. For
      eg, 2 means logs for last 2 days.
    AllowedPattern: .+
  HttpLogsEndpoint:
    Type: String
    Description: Paste the URL for the HTTP Logs source.
    AllowedPattern: .+
    NoEcho: true
  Token:
    Type: String
    Description: Paste the TOKEN generated from Slack App.
    AllowedPattern: .+
    NoEcho: true
  EnableInfrequentChannels:
    Type: String
    Description: True -> Enable dividing channels into frequent and infrequent based
      on the last message time. False -> Send all public channels messages.
    AllowedValues:
    - true
    - false
    Default: false
  InfrequentChannelsThresholdInHours:
    Type: String
    Description: Threshold in hours to make channels as infrequent based on last message
      time. For eg, 12 hours means if the message is not recived for 12 hours, channel
      will be marked as infrequent.
    Default: 72
  InfrequentChannelsMessagesFetchTimeInHours:
    Type: String
    Description: Time in hours to fetch messages for InFrequent channels. For eg,
      12 hours means send infrequent channels messages every 12 hours.
    Default: 12
  DatabaseName:
    Type: String
    Description: DynamoDB DataBase Table Name.
    Default: sumoslack
Resources:
  SlackFunction:
    Properties:
      CodeUri: s3://appdevstore-test/Slack/v1.0.7/c0e883181b33d60d02e1b431a076e003
      Description: This function gets triggered perodically via CloudWatchEvents and
        fetches logs from Slack and ingest to SumoLogic
      Environment:
        Variables:
          BACKFILL_DAYS:
            Ref: BackfillDays
          ENABLE_CONSOLE_LOG: 'false'
          ENVIRONMENT: aws
          HTTP_LOGS_ENDPOINT:
            Ref: HttpLogsEndpoint
          TOKEN:
            Ref: Token
          ENABLE_INFREQUENT_CHANNELS:
            Ref: EnableInfrequentChannels
          INFREQUENT_CHANNELS_THRESHOLD_IN_HOURS:
            Ref: InfrequentChannelsThresholdInHours
          INFREQUENT_CHANNELS_MESSAGES_FETCH_TIME_IN_HOURS:
            Ref: InfrequentChannelsMessagesFetchTimeInHours
          DBNAME:
            Ref: DatabaseName
      Events:
        ScheduleRule:
          Properties:
            Schedule: rate(10 minutes)
          Type: Schedule
      Handler: main.main
      Layers:
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:956882708938:layer:Slack-deps:5
      MemorySize: 256
      Policies:
      - AmazonDynamoDBFullAccess
      Runtime: python3.7
      Timeout: 900
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
